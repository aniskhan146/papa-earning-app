import os
from flask import Flask, jsonify, request
from flask_cors import CORS
from datetime import datetime, timedelta

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
app = Flask(__name__)
CORS(app)  # ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡¶è‡¶®‡ßç‡¶°‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- ‡¶á‡¶®-‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶°‡ßá‡¶Æ‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
# ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá PostgreSQL, MongoDB ‡¶¨‡¶æ Redis ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§
# Render-‡¶è‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
user_data = {
    'balance': 15.75,
    'lifetime_points': 150.25,
    'last_ad_time': 0,  # UNIX timestamp for cooldown
    'last_daily_bonus': None,  # ISO format string date
    'history': [
        {'type': 'Initial Bonus', 'amount': 10.00, 'date': '2023-10-27T10:00:00Z'},
        {'type': 'Ad Reward', 'amount': 5.75, 'date': '2023-10-27T11:30:00Z'},
    ]
}

# --- ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ---
REWARDS = {
    'adsgram': 2.50,
    'monetag_rewarded': 5.00,
    'monetag_interstitial': 1.25,
    'daily_bonus': 25.00
}

# ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶®
AD_COOLDOWN_SECONDS = 30

# --- API ‡¶∞‡ßÅ‡¶ü‡¶∏ ---

@app.route('/')
def home():
    """‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤ ‡¶∞‡ßÅ‡¶ü"""
    return "PAPA Earning API is running successfully!"

@app.route('/api/data', methods=['GET'])
def get_user_data():
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá"""
    return jsonify(user_data)

@app.route('/api/reward', methods=['POST'])
def grant_reward():
    """‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡ßÉ‡¶§ ‡¶ï‡¶∞‡ßá"""
    global user_data

    # ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    current_time = datetime.now().timestamp()
    time_since_last_ad = current_time - user_data['last_ad_time']
    
    if time_since_last_ad < AD_COOLDOWN_SECONDS:
        remaining_time = AD_COOLDOWN_SECONDS - time_since_last_ad
        return jsonify({'error': f'Please wait {int(remaining_time)} more seconds'}), 429 # 429 = Too Many Requests

    # ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    data = request.json
    ad_type = data.get('type')
    
    if ad_type not in REWARDS:
        return jsonify({'error': 'Invalid reward type'}), 400

    amount = REWARDS[ad_type]
    user_data['balance'] += amount
    user_data['lifetime_points'] += amount
    user_data['last_ad_time'] = current_time

    # ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    user_data['history'].insert(0, {
        'type': f'{ad_type.replace("_", " ").title()} Reward',
        'amount': amount,
        'date': datetime.utcnow().isoformat() + 'Z'
    })

    return jsonify({
        'message': f'Successfully rewarded {amount} points!',
        'new_balance': user_data['balance']
    })

@app.route('/api/daily_bonus', methods=['POST'])
def claim_daily_bonus():
    """‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá"""
    global user_data
    
    today_str = datetime.utcnow().date().isoformat()
    
    if user_data['last_daily_bonus'] == today_str:
        return jsonify({'error': 'Daily bonus already claimed for today'}), 400
        
    amount = REWARDS['daily_bonus']
    user_data['balance'] += amount
    user_data['lifetime_points'] += amount
    user_data['last_daily_bonus'] = today_str

    user_data['history'].insert(0, {
        'type': 'Daily Bonus',
        'amount': amount,
        'date': datetime.utcnow().isoformat() + 'Z'
    })

    return jsonify({
        'message': f'üéâ Congratulations! You have claimed your daily bonus of {amount} points!',
        'new_balance': user_data['balance']
    })

# --- ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)